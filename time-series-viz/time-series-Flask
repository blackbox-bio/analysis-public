from flask import Flask, render_template, request, jsonify
import os
import h5py
import numpy as np
from scipy.ndimage import gaussian_filter1d
import uuid

app = Flask(__name__)

# Define project directory and file paths
proj_dir = r"D:\data\TAMU\hallway-tests_analysis"
recording_name = "2024-07-31_15-19-11_7917-1-sec-dwell-training-sci"
features_h5 = os.path.join(proj_dir, recording_name, "features.h5")

# Load the HDF5 file and extract the relevant information into a dictionary for faster access
features_data = {}
recording_fps = 45  # Assuming a fixed FPS for now
with h5py.File(features_h5, "r") as features_df:
    recording_id = list(features_df.keys())[0]
    feature_cols = list(features_df[recording_id].keys())
    for feature in feature_cols:
        if features_df[recording_id][feature].shape == ():  # Scalar
            features_data[feature] = features_df[recording_id][feature][()]
        else:  # Non-scalar, it's an array
            features_data[feature] = features_df[recording_id][feature][:]
    recording_fps = features_df[recording_id]["fps"][()]
    recording_frame_count = features_df[recording_id]["frame_count"][()]
    feature_cols = [col for col in feature_cols if col not in ["fps", "frame_count"]]

@app.route('/')
def index():
    return render_template('index.html', feature_cols=feature_cols, recording_fps=recording_fps)

@app.route('/get_data', methods=['POST'])
def get_data():
    selected_features = request.json['features']
    sigma_multiplier = request.json['sigma']
    sigma = sigma_multiplier * recording_fps

    response_data = {}

    for feature in selected_features:
        data = features_data[feature]
        smoothed_data = gaussian_filter1d(data, sigma=sigma)
        response_data[feature] = {
            'raw': data.tolist(),
            'smoothed': smoothed_data.tolist()
        }

    return jsonify(response_data)

if __name__ == '__main__':
    app.run(debug=True)
